#记录器：提供应用程序代码直接使用的接口
#设置记录器名称，root必须存在
[loggers]
keys=root,compute_iou,check_recognize,small_object_detect

#处理器，将记录器产生的日志发送至目的地
#设置处理器类型
[handlers]
keys=consoleHandler,fileHandler_compute_iou,fileHandler_check_recognize,fileHandler_small_object_detect

#格式化器，设置日志内容的组成结构和消息字段
#设置格式化器的种类
[formatters]
keys=simpleFormatter

#设置记录器root的级别与种类
[logger_root]
level=DEBUG
handlers=consoleHandler


#设置记录器compute_iou的级别与种类 查准率
[logger_compute_iou]
level=DEBUG
handlers=fileHandler_compute_iou,consoleHandler
#起个对外的名字
qualname=compute_iou
#继承关系
propagate=0

#设置记录器check_recognize的级别与种类 识别率
[logger_check_recognize]
level=DEBUG
handlers=fileHandler_check_recognize,consoleHandler
#起个对外的名字
qualname=check_recognize
#继承关系
propagate=0

#设置记录器small_object_detect的级别与种类 小目标查准率
[logger_small_object_detect]
level=DEBUG
handlers=fileHandler_small_object_detect,consoleHandler
#起个对外的名字
qualname=small_object_detect
#继承关系
propagate=0

#设置
[handler_consoleHandler]
class=StreamHandler
args=(sys.stdout,)
level=DEBUG
formatter=simpleFormatter

#查全率和查准率检查
[handler_fileHandler_compute_iou]
class=handlers.TimedRotatingFileHandler
#在午夜1点（3600s）开启下一个log文件，第四个参数0表示保留历史文件
args=('compute_iou.log','midnight',3600,0)
level=DEBUG
formatter=simpleFormatter

#识别率
[handler_fileHandler_check_recognize]
class=handlers.TimedRotatingFileHandler
#在午夜1点（3600s）开启下一个log文件，第四个参数0表示保留历史文件
args=('check_recognize.log','midnight',3600,0)
level=DEBUG
formatter=simpleFormatter


#小目标查全率和查准率检查
[handler_fileHandler_small_object_detect]
class=handlers.TimedRotatingFileHandler
#在午夜1点（3600s）开启下一个log文件，第四个参数0表示保留历史文件
args=('small_object.log','midnight',3600,0)
level=DEBUG
formatter=simpleFormatter


[formatter_simpleFormatter]
format=%(asctime)s|%(levelname)-8s|[%(filename)s:%(lineno)d]|%(message)s
#设置时间输出格式
datefmt=%Y-%m-%d %H:%M:%S
